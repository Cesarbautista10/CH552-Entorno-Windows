                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.3.0 #14184 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module usb_handler
                                      6 	.optsdcc -mmcs51 --model-small
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _USB_EP0_OUT
                                     12 	.globl _USB_EP0_IN
                                     13 	.globl _USB_EP0_SETUP
                                     14 	.globl _USB_EP0_copyDescr
                                     15 	.globl _HID_EP2_OUT
                                     16 	.globl _HID_EP1_IN
                                     17 	.globl _HID_reset
                                     18 	.globl _HID_setup
                                     19 	.globl _UIF_BUS_RST
                                     20 	.globl _UIF_DETECT
                                     21 	.globl _UIF_TRANSFER
                                     22 	.globl _UIF_SUSPEND
                                     23 	.globl _UIF_HST_SOF
                                     24 	.globl _UIF_FIFO_OV
                                     25 	.globl _U_SIE_FREE
                                     26 	.globl _U_TOG_OK
                                     27 	.globl _U_IS_NAK
                                     28 	.globl _ADC_CHAN0
                                     29 	.globl _ADC_CHAN1
                                     30 	.globl _CMP_CHAN
                                     31 	.globl _ADC_START
                                     32 	.globl _ADC_IF
                                     33 	.globl _CMP_IF
                                     34 	.globl _CMPO
                                     35 	.globl _U1RI
                                     36 	.globl _U1TI
                                     37 	.globl _U1RB8
                                     38 	.globl _U1TB8
                                     39 	.globl _U1REN
                                     40 	.globl _U1SMOD
                                     41 	.globl _U1SM0
                                     42 	.globl _S0_R_FIFO
                                     43 	.globl _S0_T_FIFO
                                     44 	.globl _S0_FREE
                                     45 	.globl _S0_IF_BYTE
                                     46 	.globl _S0_IF_FIRST
                                     47 	.globl _S0_IF_OV
                                     48 	.globl _S0_FST_ACT
                                     49 	.globl _CP_RL2
                                     50 	.globl _C_T2
                                     51 	.globl _TR2
                                     52 	.globl _EXEN2
                                     53 	.globl _TCLK
                                     54 	.globl _RCLK
                                     55 	.globl _EXF2
                                     56 	.globl _CAP1F
                                     57 	.globl _TF2
                                     58 	.globl _RI
                                     59 	.globl _TI
                                     60 	.globl _RB8
                                     61 	.globl _TB8
                                     62 	.globl _REN
                                     63 	.globl _SM2
                                     64 	.globl _SM1
                                     65 	.globl _SM0
                                     66 	.globl _IT0
                                     67 	.globl _IE0
                                     68 	.globl _IT1
                                     69 	.globl _IE1
                                     70 	.globl _TR0
                                     71 	.globl _TF0
                                     72 	.globl _TR1
                                     73 	.globl _TF1
                                     74 	.globl _RXD
                                     75 	.globl _PWM1_
                                     76 	.globl _TXD
                                     77 	.globl _PWM2_
                                     78 	.globl _AIN3
                                     79 	.globl _VBUS1
                                     80 	.globl _INT0
                                     81 	.globl _TXD1_
                                     82 	.globl _INT1
                                     83 	.globl _T0
                                     84 	.globl _RXD1_
                                     85 	.globl _PWM2
                                     86 	.globl _T1
                                     87 	.globl _UDP
                                     88 	.globl _UDM
                                     89 	.globl _TIN0
                                     90 	.globl _CAP1
                                     91 	.globl _T2
                                     92 	.globl _AIN0
                                     93 	.globl _VBUS2
                                     94 	.globl _TIN1
                                     95 	.globl _CAP2
                                     96 	.globl _T2EX
                                     97 	.globl _RXD_
                                     98 	.globl _TXD_
                                     99 	.globl _AIN1
                                    100 	.globl _UCC1
                                    101 	.globl _TIN2
                                    102 	.globl _SCS
                                    103 	.globl _CAP1_
                                    104 	.globl _T2_
                                    105 	.globl _AIN2
                                    106 	.globl _UCC2
                                    107 	.globl _TIN3
                                    108 	.globl _PWM1
                                    109 	.globl _MOSI
                                    110 	.globl _TIN4
                                    111 	.globl _RXD1
                                    112 	.globl _MISO
                                    113 	.globl _TIN5
                                    114 	.globl _TXD1
                                    115 	.globl _SCK
                                    116 	.globl _IE_SPI0
                                    117 	.globl _IE_TKEY
                                    118 	.globl _IE_USB
                                    119 	.globl _IE_ADC
                                    120 	.globl _IE_UART1
                                    121 	.globl _IE_PWMX
                                    122 	.globl _IE_GPIO
                                    123 	.globl _IE_WDOG
                                    124 	.globl _PX0
                                    125 	.globl _PT0
                                    126 	.globl _PX1
                                    127 	.globl _PT1
                                    128 	.globl _PS
                                    129 	.globl _PT2
                                    130 	.globl _PL_FLAG
                                    131 	.globl _PH_FLAG
                                    132 	.globl _EX0
                                    133 	.globl _ET0
                                    134 	.globl _EX1
                                    135 	.globl _ET1
                                    136 	.globl _ES
                                    137 	.globl _ET2
                                    138 	.globl _E_DIS
                                    139 	.globl _EA
                                    140 	.globl _P
                                    141 	.globl _F1
                                    142 	.globl _OV
                                    143 	.globl _RS0
                                    144 	.globl _RS1
                                    145 	.globl _F0
                                    146 	.globl _AC
                                    147 	.globl _CY
                                    148 	.globl _UEP1_DMA_H
                                    149 	.globl _UEP1_DMA_L
                                    150 	.globl _UEP1_DMA
                                    151 	.globl _UEP0_DMA_H
                                    152 	.globl _UEP0_DMA_L
                                    153 	.globl _UEP0_DMA
                                    154 	.globl _UEP2_3_MOD
                                    155 	.globl _UEP4_1_MOD
                                    156 	.globl _UEP3_DMA_H
                                    157 	.globl _UEP3_DMA_L
                                    158 	.globl _UEP3_DMA
                                    159 	.globl _UEP2_DMA_H
                                    160 	.globl _UEP2_DMA_L
                                    161 	.globl _UEP2_DMA
                                    162 	.globl _USB_DEV_AD
                                    163 	.globl _USB_CTRL
                                    164 	.globl _USB_INT_EN
                                    165 	.globl _UEP4_T_LEN
                                    166 	.globl _UEP4_CTRL
                                    167 	.globl _UEP0_T_LEN
                                    168 	.globl _UEP0_CTRL
                                    169 	.globl _USB_RX_LEN
                                    170 	.globl _USB_MIS_ST
                                    171 	.globl _USB_INT_ST
                                    172 	.globl _USB_INT_FG
                                    173 	.globl _UEP3_T_LEN
                                    174 	.globl _UEP3_CTRL
                                    175 	.globl _UEP2_T_LEN
                                    176 	.globl _UEP2_CTRL
                                    177 	.globl _UEP1_T_LEN
                                    178 	.globl _UEP1_CTRL
                                    179 	.globl _UDEV_CTRL
                                    180 	.globl _USB_C_CTRL
                                    181 	.globl _TKEY_DATH
                                    182 	.globl _TKEY_DATL
                                    183 	.globl _TKEY_DAT
                                    184 	.globl _TKEY_CTRL
                                    185 	.globl _ADC_DATA
                                    186 	.globl _ADC_CFG
                                    187 	.globl _ADC_CTRL
                                    188 	.globl _SBAUD1
                                    189 	.globl _SBUF1
                                    190 	.globl _SCON1
                                    191 	.globl _SPI0_SETUP
                                    192 	.globl _SPI0_CK_SE
                                    193 	.globl _SPI0_CTRL
                                    194 	.globl _SPI0_DATA
                                    195 	.globl _SPI0_STAT
                                    196 	.globl _PWM_CK_SE
                                    197 	.globl _PWM_CTRL
                                    198 	.globl _PWM_DATA1
                                    199 	.globl _PWM_DATA2
                                    200 	.globl _T2CAP1H
                                    201 	.globl _T2CAP1L
                                    202 	.globl _T2CAP1
                                    203 	.globl _TH2
                                    204 	.globl _TL2
                                    205 	.globl _T2COUNT
                                    206 	.globl _RCAP2H
                                    207 	.globl _RCAP2L
                                    208 	.globl _RCAP2
                                    209 	.globl _T2MOD
                                    210 	.globl _T2CON
                                    211 	.globl _SBUF
                                    212 	.globl _SCON
                                    213 	.globl _TH1
                                    214 	.globl _TH0
                                    215 	.globl _TL1
                                    216 	.globl _TL0
                                    217 	.globl _TMOD
                                    218 	.globl _TCON
                                    219 	.globl _XBUS_AUX
                                    220 	.globl _PIN_FUNC
                                    221 	.globl _P3_DIR_PU
                                    222 	.globl _P3_MOD_OC
                                    223 	.globl _P3
                                    224 	.globl _P2
                                    225 	.globl _P1_DIR_PU
                                    226 	.globl _P1_MOD_OC
                                    227 	.globl _P1
                                    228 	.globl _ROM_CTRL
                                    229 	.globl _ROM_DATA_H
                                    230 	.globl _ROM_DATA_L
                                    231 	.globl _ROM_DATA
                                    232 	.globl _ROM_ADDR_H
                                    233 	.globl _ROM_ADDR_L
                                    234 	.globl _ROM_ADDR
                                    235 	.globl _GPIO_IE
                                    236 	.globl _IP_EX
                                    237 	.globl _IE_EX
                                    238 	.globl _IP
                                    239 	.globl _IE
                                    240 	.globl _WDOG_COUNT
                                    241 	.globl _RESET_KEEP
                                    242 	.globl _WAKE_CTRL
                                    243 	.globl _CLOCK_CFG
                                    244 	.globl _PCON
                                    245 	.globl _GLOBAL_CFG
                                    246 	.globl _SAFE_MOD
                                    247 	.globl _DPH
                                    248 	.globl _DPL
                                    249 	.globl _SP
                                    250 	.globl _B
                                    251 	.globl _ACC
                                    252 	.globl _PSW
                                    253 	.globl _EP2_buffer
                                    254 	.globl _EP1_buffer
                                    255 	.globl _EP0_buffer
                                    256 	.globl _pDescr
                                    257 	.globl _UsbConfig
                                    258 	.globl _SetupReq
                                    259 	.globl _SetupLen
                                    260 	.globl _USB_interrupt
                                    261 	.globl _USB_init
                                    262 ;--------------------------------------------------------
                                    263 ; special function registers
                                    264 ;--------------------------------------------------------
                                    265 	.area RSEG    (ABS,DATA)
      000000                        266 	.org 0x0000
                           0000D0   267 _PSW	=	0x00d0
                           0000E0   268 _ACC	=	0x00e0
                           0000F0   269 _B	=	0x00f0
                           000081   270 _SP	=	0x0081
                           000082   271 _DPL	=	0x0082
                           000083   272 _DPH	=	0x0083
                           0000A1   273 _SAFE_MOD	=	0x00a1
                           0000B1   274 _GLOBAL_CFG	=	0x00b1
                           000087   275 _PCON	=	0x0087
                           0000B9   276 _CLOCK_CFG	=	0x00b9
                           0000A9   277 _WAKE_CTRL	=	0x00a9
                           0000FE   278 _RESET_KEEP	=	0x00fe
                           0000FF   279 _WDOG_COUNT	=	0x00ff
                           0000A8   280 _IE	=	0x00a8
                           0000B8   281 _IP	=	0x00b8
                           0000E8   282 _IE_EX	=	0x00e8
                           0000E9   283 _IP_EX	=	0x00e9
                           0000C7   284 _GPIO_IE	=	0x00c7
                           008584   285 _ROM_ADDR	=	0x8584
                           000084   286 _ROM_ADDR_L	=	0x0084
                           000085   287 _ROM_ADDR_H	=	0x0085
                           008F8E   288 _ROM_DATA	=	0x8f8e
                           00008E   289 _ROM_DATA_L	=	0x008e
                           00008F   290 _ROM_DATA_H	=	0x008f
                           000086   291 _ROM_CTRL	=	0x0086
                           000090   292 _P1	=	0x0090
                           000092   293 _P1_MOD_OC	=	0x0092
                           000093   294 _P1_DIR_PU	=	0x0093
                           0000A0   295 _P2	=	0x00a0
                           0000B0   296 _P3	=	0x00b0
                           000096   297 _P3_MOD_OC	=	0x0096
                           000097   298 _P3_DIR_PU	=	0x0097
                           0000C6   299 _PIN_FUNC	=	0x00c6
                           0000A2   300 _XBUS_AUX	=	0x00a2
                           000088   301 _TCON	=	0x0088
                           000089   302 _TMOD	=	0x0089
                           00008A   303 _TL0	=	0x008a
                           00008B   304 _TL1	=	0x008b
                           00008C   305 _TH0	=	0x008c
                           00008D   306 _TH1	=	0x008d
                           000098   307 _SCON	=	0x0098
                           000099   308 _SBUF	=	0x0099
                           0000C8   309 _T2CON	=	0x00c8
                           0000C9   310 _T2MOD	=	0x00c9
                           00CBCA   311 _RCAP2	=	0xcbca
                           0000CA   312 _RCAP2L	=	0x00ca
                           0000CB   313 _RCAP2H	=	0x00cb
                           00CDCC   314 _T2COUNT	=	0xcdcc
                           0000CC   315 _TL2	=	0x00cc
                           0000CD   316 _TH2	=	0x00cd
                           00CFCE   317 _T2CAP1	=	0xcfce
                           0000CE   318 _T2CAP1L	=	0x00ce
                           0000CF   319 _T2CAP1H	=	0x00cf
                           00009B   320 _PWM_DATA2	=	0x009b
                           00009C   321 _PWM_DATA1	=	0x009c
                           00009D   322 _PWM_CTRL	=	0x009d
                           00009E   323 _PWM_CK_SE	=	0x009e
                           0000F8   324 _SPI0_STAT	=	0x00f8
                           0000F9   325 _SPI0_DATA	=	0x00f9
                           0000FA   326 _SPI0_CTRL	=	0x00fa
                           0000FB   327 _SPI0_CK_SE	=	0x00fb
                           0000FC   328 _SPI0_SETUP	=	0x00fc
                           0000C0   329 _SCON1	=	0x00c0
                           0000C1   330 _SBUF1	=	0x00c1
                           0000C2   331 _SBAUD1	=	0x00c2
                           000080   332 _ADC_CTRL	=	0x0080
                           00009A   333 _ADC_CFG	=	0x009a
                           00009F   334 _ADC_DATA	=	0x009f
                           0000C3   335 _TKEY_CTRL	=	0x00c3
                           00C5C4   336 _TKEY_DAT	=	0xc5c4
                           0000C4   337 _TKEY_DATL	=	0x00c4
                           0000C5   338 _TKEY_DATH	=	0x00c5
                           000091   339 _USB_C_CTRL	=	0x0091
                           0000D1   340 _UDEV_CTRL	=	0x00d1
                           0000D2   341 _UEP1_CTRL	=	0x00d2
                           0000D3   342 _UEP1_T_LEN	=	0x00d3
                           0000D4   343 _UEP2_CTRL	=	0x00d4
                           0000D5   344 _UEP2_T_LEN	=	0x00d5
                           0000D6   345 _UEP3_CTRL	=	0x00d6
                           0000D7   346 _UEP3_T_LEN	=	0x00d7
                           0000D8   347 _USB_INT_FG	=	0x00d8
                           0000D9   348 _USB_INT_ST	=	0x00d9
                           0000DA   349 _USB_MIS_ST	=	0x00da
                           0000DB   350 _USB_RX_LEN	=	0x00db
                           0000DC   351 _UEP0_CTRL	=	0x00dc
                           0000DD   352 _UEP0_T_LEN	=	0x00dd
                           0000DE   353 _UEP4_CTRL	=	0x00de
                           0000DF   354 _UEP4_T_LEN	=	0x00df
                           0000E1   355 _USB_INT_EN	=	0x00e1
                           0000E2   356 _USB_CTRL	=	0x00e2
                           0000E3   357 _USB_DEV_AD	=	0x00e3
                           00E5E4   358 _UEP2_DMA	=	0xe5e4
                           0000E4   359 _UEP2_DMA_L	=	0x00e4
                           0000E5   360 _UEP2_DMA_H	=	0x00e5
                           00E7E6   361 _UEP3_DMA	=	0xe7e6
                           0000E6   362 _UEP3_DMA_L	=	0x00e6
                           0000E7   363 _UEP3_DMA_H	=	0x00e7
                           0000EA   364 _UEP4_1_MOD	=	0x00ea
                           0000EB   365 _UEP2_3_MOD	=	0x00eb
                           00EDEC   366 _UEP0_DMA	=	0xedec
                           0000EC   367 _UEP0_DMA_L	=	0x00ec
                           0000ED   368 _UEP0_DMA_H	=	0x00ed
                           00EFEE   369 _UEP1_DMA	=	0xefee
                           0000EE   370 _UEP1_DMA_L	=	0x00ee
                           0000EF   371 _UEP1_DMA_H	=	0x00ef
                                    372 ;--------------------------------------------------------
                                    373 ; special function bits
                                    374 ;--------------------------------------------------------
                                    375 	.area RSEG    (ABS,DATA)
      000000                        376 	.org 0x0000
                           0000D7   377 _CY	=	0x00d7
                           0000D6   378 _AC	=	0x00d6
                           0000D5   379 _F0	=	0x00d5
                           0000D4   380 _RS1	=	0x00d4
                           0000D3   381 _RS0	=	0x00d3
                           0000D2   382 _OV	=	0x00d2
                           0000D1   383 _F1	=	0x00d1
                           0000D0   384 _P	=	0x00d0
                           0000AF   385 _EA	=	0x00af
                           0000AE   386 _E_DIS	=	0x00ae
                           0000AD   387 _ET2	=	0x00ad
                           0000AC   388 _ES	=	0x00ac
                           0000AB   389 _ET1	=	0x00ab
                           0000AA   390 _EX1	=	0x00aa
                           0000A9   391 _ET0	=	0x00a9
                           0000A8   392 _EX0	=	0x00a8
                           0000BF   393 _PH_FLAG	=	0x00bf
                           0000BE   394 _PL_FLAG	=	0x00be
                           0000BD   395 _PT2	=	0x00bd
                           0000BC   396 _PS	=	0x00bc
                           0000BB   397 _PT1	=	0x00bb
                           0000BA   398 _PX1	=	0x00ba
                           0000B9   399 _PT0	=	0x00b9
                           0000B8   400 _PX0	=	0x00b8
                           0000EF   401 _IE_WDOG	=	0x00ef
                           0000EE   402 _IE_GPIO	=	0x00ee
                           0000ED   403 _IE_PWMX	=	0x00ed
                           0000EC   404 _IE_UART1	=	0x00ec
                           0000EB   405 _IE_ADC	=	0x00eb
                           0000EA   406 _IE_USB	=	0x00ea
                           0000E9   407 _IE_TKEY	=	0x00e9
                           0000E8   408 _IE_SPI0	=	0x00e8
                           000097   409 _SCK	=	0x0097
                           000097   410 _TXD1	=	0x0097
                           000097   411 _TIN5	=	0x0097
                           000096   412 _MISO	=	0x0096
                           000096   413 _RXD1	=	0x0096
                           000096   414 _TIN4	=	0x0096
                           000095   415 _MOSI	=	0x0095
                           000095   416 _PWM1	=	0x0095
                           000095   417 _TIN3	=	0x0095
                           000095   418 _UCC2	=	0x0095
                           000095   419 _AIN2	=	0x0095
                           000094   420 _T2_	=	0x0094
                           000094   421 _CAP1_	=	0x0094
                           000094   422 _SCS	=	0x0094
                           000094   423 _TIN2	=	0x0094
                           000094   424 _UCC1	=	0x0094
                           000094   425 _AIN1	=	0x0094
                           000093   426 _TXD_	=	0x0093
                           000092   427 _RXD_	=	0x0092
                           000091   428 _T2EX	=	0x0091
                           000091   429 _CAP2	=	0x0091
                           000091   430 _TIN1	=	0x0091
                           000091   431 _VBUS2	=	0x0091
                           000091   432 _AIN0	=	0x0091
                           000090   433 _T2	=	0x0090
                           000090   434 _CAP1	=	0x0090
                           000090   435 _TIN0	=	0x0090
                           0000B7   436 _UDM	=	0x00b7
                           0000B6   437 _UDP	=	0x00b6
                           0000B5   438 _T1	=	0x00b5
                           0000B4   439 _PWM2	=	0x00b4
                           0000B4   440 _RXD1_	=	0x00b4
                           0000B4   441 _T0	=	0x00b4
                           0000B3   442 _INT1	=	0x00b3
                           0000B2   443 _TXD1_	=	0x00b2
                           0000B2   444 _INT0	=	0x00b2
                           0000B2   445 _VBUS1	=	0x00b2
                           0000B2   446 _AIN3	=	0x00b2
                           0000B1   447 _PWM2_	=	0x00b1
                           0000B1   448 _TXD	=	0x00b1
                           0000B0   449 _PWM1_	=	0x00b0
                           0000B0   450 _RXD	=	0x00b0
                           00008F   451 _TF1	=	0x008f
                           00008E   452 _TR1	=	0x008e
                           00008D   453 _TF0	=	0x008d
                           00008C   454 _TR0	=	0x008c
                           00008B   455 _IE1	=	0x008b
                           00008A   456 _IT1	=	0x008a
                           000089   457 _IE0	=	0x0089
                           000088   458 _IT0	=	0x0088
                           00009F   459 _SM0	=	0x009f
                           00009E   460 _SM1	=	0x009e
                           00009D   461 _SM2	=	0x009d
                           00009C   462 _REN	=	0x009c
                           00009B   463 _TB8	=	0x009b
                           00009A   464 _RB8	=	0x009a
                           000099   465 _TI	=	0x0099
                           000098   466 _RI	=	0x0098
                           0000CF   467 _TF2	=	0x00cf
                           0000CF   468 _CAP1F	=	0x00cf
                           0000CE   469 _EXF2	=	0x00ce
                           0000CD   470 _RCLK	=	0x00cd
                           0000CC   471 _TCLK	=	0x00cc
                           0000CB   472 _EXEN2	=	0x00cb
                           0000CA   473 _TR2	=	0x00ca
                           0000C9   474 _C_T2	=	0x00c9
                           0000C8   475 _CP_RL2	=	0x00c8
                           0000FF   476 _S0_FST_ACT	=	0x00ff
                           0000FE   477 _S0_IF_OV	=	0x00fe
                           0000FD   478 _S0_IF_FIRST	=	0x00fd
                           0000FC   479 _S0_IF_BYTE	=	0x00fc
                           0000FB   480 _S0_FREE	=	0x00fb
                           0000FA   481 _S0_T_FIFO	=	0x00fa
                           0000F8   482 _S0_R_FIFO	=	0x00f8
                           0000C7   483 _U1SM0	=	0x00c7
                           0000C5   484 _U1SMOD	=	0x00c5
                           0000C4   485 _U1REN	=	0x00c4
                           0000C3   486 _U1TB8	=	0x00c3
                           0000C2   487 _U1RB8	=	0x00c2
                           0000C1   488 _U1TI	=	0x00c1
                           0000C0   489 _U1RI	=	0x00c0
                           000087   490 _CMPO	=	0x0087
                           000086   491 _CMP_IF	=	0x0086
                           000085   492 _ADC_IF	=	0x0085
                           000084   493 _ADC_START	=	0x0084
                           000083   494 _CMP_CHAN	=	0x0083
                           000081   495 _ADC_CHAN1	=	0x0081
                           000080   496 _ADC_CHAN0	=	0x0080
                           0000DF   497 _U_IS_NAK	=	0x00df
                           0000DE   498 _U_TOG_OK	=	0x00de
                           0000DD   499 _U_SIE_FREE	=	0x00dd
                           0000DC   500 _UIF_FIFO_OV	=	0x00dc
                           0000DB   501 _UIF_HST_SOF	=	0x00db
                           0000DA   502 _UIF_SUSPEND	=	0x00da
                           0000D9   503 _UIF_TRANSFER	=	0x00d9
                           0000D8   504 _UIF_DETECT	=	0x00d8
                           0000D8   505 _UIF_BUS_RST	=	0x00d8
                                    506 ;--------------------------------------------------------
                                    507 ; overlayable register banks
                                    508 ;--------------------------------------------------------
                                    509 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        510 	.ds 8
                                    511 ;--------------------------------------------------------
                                    512 ; internal ram data
                                    513 ;--------------------------------------------------------
                                    514 	.area DSEG    (DATA)
      000000                        515 _SetupLen::
      000000                        516 	.ds 2
      000002                        517 _SetupReq::
      000002                        518 	.ds 1
      000003                        519 _UsbConfig::
      000003                        520 	.ds 1
      000004                        521 _pDescr::
      000004                        522 	.ds 2
                                    523 ;--------------------------------------------------------
                                    524 ; overlayable items in internal ram
                                    525 ;--------------------------------------------------------
                                    526 	.area	OSEG    (OVR,DATA)
                                    527 ;--------------------------------------------------------
                                    528 ; indirectly addressable internal ram data
                                    529 ;--------------------------------------------------------
                                    530 	.area ISEG    (DATA)
                                    531 ;--------------------------------------------------------
                                    532 ; absolute internal ram data
                                    533 ;--------------------------------------------------------
                                    534 	.area IABS    (ABS,DATA)
                                    535 	.area IABS    (ABS,DATA)
                                    536 ;--------------------------------------------------------
                                    537 ; bit data
                                    538 ;--------------------------------------------------------
                                    539 	.area BSEG    (BIT)
      000000                        540 _USB_EP0_SETUP_sloc0_1_0:
      000000                        541 	.ds 1
      000001                        542 _USB_EP0_IN_sloc0_1_0:
      000001                        543 	.ds 1
                                    544 ;--------------------------------------------------------
                                    545 ; paged external ram data
                                    546 ;--------------------------------------------------------
                                    547 	.area PSEG    (PAG,XDATA)
                                    548 ;--------------------------------------------------------
                                    549 ; uninitialized external ram data
                                    550 ;--------------------------------------------------------
                                    551 	.area XSEG    (XDATA)
                           000000   552 _EP0_buffer	=	0x0000
                           000040   553 _EP1_buffer	=	0x0040
                           000052   554 _EP2_buffer	=	0x0052
                                    555 ;--------------------------------------------------------
                                    556 ; absolute external ram data
                                    557 ;--------------------------------------------------------
                                    558 	.area XABS    (ABS,XDATA)
                                    559 ;--------------------------------------------------------
                                    560 ; initialized external ram data
                                    561 ;--------------------------------------------------------
                                    562 	.area HOME    (CODE)
                                    563 	.area GSINIT0 (CODE)
                                    564 	.area GSINIT1 (CODE)
                                    565 	.area GSINIT2 (CODE)
                                    566 	.area GSINIT3 (CODE)
                                    567 	.area GSINIT4 (CODE)
                                    568 	.area GSINIT5 (CODE)
                                    569 	.area GSINIT  (CODE)
                                    570 	.area GSFINAL (CODE)
                                    571 	.area CSEG    (CODE)
                                    572 ;--------------------------------------------------------
                                    573 ; global & static initialisations
                                    574 ;--------------------------------------------------------
                                    575 	.area HOME    (CODE)
                                    576 	.area GSINIT  (CODE)
                                    577 	.area GSFINAL (CODE)
                                    578 	.area GSINIT  (CODE)
                                    579 ;--------------------------------------------------------
                                    580 ; Home
                                    581 ;--------------------------------------------------------
                                    582 	.area HOME    (CODE)
                                    583 	.area HOME    (CODE)
                                    584 ;--------------------------------------------------------
                                    585 ; code
                                    586 ;--------------------------------------------------------
                                    587 	.area CSEG    (CODE)
                                    588 ;------------------------------------------------------------
                                    589 ;Allocation info for local variables in function 'USB_EP0_copyDescr'
                                    590 ;------------------------------------------------------------
                                    591 ;len                       Allocated to registers 
                                    592 ;------------------------------------------------------------
                                    593 ;	src/usb_handler.c:18: void USB_EP0_copyDescr(uint8_t len) {
                                    594 ;	-----------------------------------------
                                    595 ;	 function USB_EP0_copyDescr
                                    596 ;	-----------------------------------------
      000000                        597 _USB_EP0_copyDescr:
                           000007   598 	ar7 = 0x07
                           000006   599 	ar6 = 0x06
                           000005   600 	ar5 = 0x05
                           000004   601 	ar4 = 0x04
                           000003   602 	ar3 = 0x03
                           000002   603 	ar2 = 0x02
                           000001   604 	ar1 = 0x01
                           000000   605 	ar0 = 0x00
                                    606 ;	src/usb_handler.c:35: __endasm;
      000000 C0 07            [24]  607 	push	ar7 ; r7 -> stack
      000002 AF 82            [24]  608 	mov	r7, dpl ; r7 <- len
      000004 05 A2            [12]  609 	inc	_XBUS_AUX ; select dptr1
      000006 90 00 00         [24]  610 	mov	dptr, #_EP0_buffer ; dptr1 <- EP0_buffer
      000009 15 A2            [12]  611 	dec	_XBUS_AUX ; select dptr0
      00000B 85*04 82         [24]  612 	mov	dpl, _pDescr ; dptr0 <- *pDescr
      00000E 85*05 83         [24]  613 	mov	dph, (_pDescr + 1)
      000011                        614 01$:
      000011 E4               [12]  615 	clr	a ; acc <- #0
      000012 93               [24]  616 	movc	a, @a+dptr ; acc <- *pDescr[dptr0]
      000013 A3               [24]  617 	inc	dptr ; inc dptr0
      000014 A5                     618 	.DB	0xA5 ; acc -> EP0_buffer[dptr1] & inc dptr1
      000015 DF FA            [24]  619 	djnz	r7, 01$ ; repeat len times
      000017 D0 07            [24]  620 	pop	ar7 ; r7 <- stack
                                    621 ;	src/usb_handler.c:36: }
      000019 22               [24]  622 	ret
                                    623 ;------------------------------------------------------------
                                    624 ;Allocation info for local variables in function 'USB_EP0_SETUP'
                                    625 ;------------------------------------------------------------
                                    626 ;len                       Allocated to registers r7 
                                    627 ;------------------------------------------------------------
                                    628 ;	src/usb_handler.c:42: void USB_EP0_SETUP(void) {
                                    629 ;	-----------------------------------------
                                    630 ;	 function USB_EP0_SETUP
                                    631 ;	-----------------------------------------
      00001A                        632 _USB_EP0_SETUP:
                                    633 ;	src/usb_handler.c:43: uint8_t len = USB_RX_LEN;
      00001A AF DB            [24]  634 	mov	r7,_USB_RX_LEN
                                    635 ;	src/usb_handler.c:44: if(len == (sizeof(USB_SETUP_REQ))) {
      00001C BF 08 02         [24]  636 	cjne	r7,#0x08,00332$
      00001F 80 03            [24]  637 	sjmp	00333$
      000021                        638 00332$:
      000021 02r02rD6         [24]  639 	ljmp	00175$
      000024                        640 00333$:
                                    641 ;	src/usb_handler.c:45: SetupLen = ((uint16_t)USB_setupBuf->wLengthH<<8) | (USB_setupBuf->wLengthL);
      000024 90 00 07         [24]  642 	mov	dptr,#(_EP0_buffer + 0x0007)
      000027 E0               [24]  643 	movx	a,@dptr
      000028 FE               [12]  644 	mov	r6,a
      000029 7F 00            [12]  645 	mov	r7,#0x00
      00002B 90 00 06         [24]  646 	mov	dptr,#(_EP0_buffer + 0x0006)
      00002E E0               [24]  647 	movx	a,@dptr
      00002F FD               [12]  648 	mov	r5,a
      000030 7C 00            [12]  649 	mov	r4,#0x00
      000032 4F               [12]  650 	orl	a,r7
      000033 F5*00            [12]  651 	mov	_SetupLen,a
      000035 EC               [12]  652 	mov	a,r4
      000036 4E               [12]  653 	orl	a,r6
      000037 F5*01            [12]  654 	mov	(_SetupLen + 1),a
                                    655 ;	src/usb_handler.c:46: len = 0;                                      // default is success and upload 0 length
                                    656 ;	src/usb_handler.c:47: SetupReq = USB_setupBuf->bRequest;
      000039 90 00 01         [24]  657 	mov	dptr,#(_EP0_buffer + 0x0001)
      00003C E0               [24]  658 	movx	a,@dptr
      00003D F5*02            [12]  659 	mov	_SetupReq,a
                                    660 ;	src/usb_handler.c:49: if( (USB_setupBuf->bRequestType & USB_REQ_TYP_MASK) != USB_REQ_TYP_STANDARD ) {
      00003F 90 00 00         [24]  661 	mov	dptr,#_EP0_buffer
      000042 E0               [24]  662 	movx	a,@dptr
      000043 FE               [12]  663 	mov	r6,a
      000044 54 60            [12]  664 	anl	a,#0x60
      000046 60 05            [24]  665 	jz	00172$
                                    666 ;	src/usb_handler.c:53: len = 0xFF;                                 // command not supported
      000048 7F FF            [12]  667 	mov	r7,#0xff
      00004A 02r02rD8         [24]  668 	ljmp	00176$
      00004D                        669 00172$:
                                    670 ;	src/usb_handler.c:58: switch(SetupReq) {                          // request ccfType
      00004D E5*02            [12]  671 	mov	a,_SetupReq
      00004F 24 F4            [12]  672 	add	a,#0xff - 0x0b
      000051 50 03            [24]  673 	jnc	00335$
      000053 02r02rD2         [24]  674 	ljmp	00169$
      000056                        675 00335$:
      000056 E5*02            [12]  676 	mov	a,_SetupReq
      000058 24 0B            [12]  677 	add	a,#(00336$-3-.)
      00005A 83               [24]  678 	movc	a,@a+pc
      00005B F5 82            [12]  679 	mov	dpl,a
      00005D E5*02            [12]  680 	mov	a,_SetupReq
      00005F 24 10            [12]  681 	add	a,#(00337$-3-.)
      000061 83               [24]  682 	movc	a,@a+pc
      000062 F5 83            [12]  683 	mov	dph,a
      000064 E4               [12]  684 	clr	a
      000065 73               [24]  685 	jmp	@a+dptr
      000066                        686 00336$:
      000066rB4                     687 	.db	00165$
      000067rA2                     688 	.db	00129$
      000068rD2                     689 	.db	00169$
      000069r13                     690 	.db	00146$
      00006ArD2                     691 	.db	00169$
      00006Br71                     692 	.db	00122$
      00006Cr7E                     693 	.db	00101$
      00006DrD2                     694 	.db	00169$
      00006Er7E                     695 	.db	00123$
      00006Fr99                     696 	.db	00126$
      000070rD8                     697 	.db	00176$
      000071rD8                     698 	.db	00176$
      000072                        699 00337$:
      000072s02                     700 	.db	00165$>>8
      000073s01                     701 	.db	00129$>>8
      000074s02                     702 	.db	00169$>>8
      000075s02                     703 	.db	00146$>>8
      000076s02                     704 	.db	00169$>>8
      000077s01                     705 	.db	00122$>>8
      000078s00                     706 	.db	00101$>>8
      000079s02                     707 	.db	00169$>>8
      00007As01                     708 	.db	00123$>>8
      00007Bs01                     709 	.db	00126$>>8
      00007Cs02                     710 	.db	00176$>>8
      00007Ds02                     711 	.db	00176$>>8
                                    712 ;	src/usb_handler.c:59: case USB_GET_DESCRIPTOR:
      00007E                        713 00101$:
                                    714 ;	src/usb_handler.c:60: switch(USB_setupBuf->wValueH) {
      00007E 90 00 03         [24]  715 	mov	dptr,#(_EP0_buffer + 0x0003)
      000081 E0               [24]  716 	movx	a,@dptr
      000082 FE               [12]  717 	mov	r6,a
      000083 BE 01 02         [24]  718 	cjne	r6,#0x01,00338$
      000086 80 12            [24]  719 	sjmp	00102$
      000088                        720 00338$:
      000088 BE 02 02         [24]  721 	cjne	r6,#0x02,00339$
      00008B 80 17            [24]  722 	sjmp	00103$
      00008D                        723 00339$:
      00008D BE 03 02         [24]  724 	cjne	r6,#0x03,00340$
      000090 80 1C            [24]  725 	sjmp	00104$
      000092                        726 00340$:
      000092 BE 22 02         [24]  727 	cjne	r6,#0x22,00341$
      000095 80 69            [24]  728 	sjmp	00112$
      000097                        729 00341$:
      000097 02r01r18         [24]  730 	ljmp	00116$
                                    731 ;	src/usb_handler.c:62: case USB_DESCR_TYP_DEVICE:            // Device Descriptor
      00009A                        732 00102$:
                                    733 ;	src/usb_handler.c:63: pDescr = (uint8_t*)&DevDescr;       // put descriptor into out buffer
      00009A 75*04r00         [24]  734 	mov	_pDescr,#_DevDescr
      00009D 75*05s00         [24]  735 	mov	(_pDescr + 1),#(_DevDescr >> 8)
                                    736 ;	src/usb_handler.c:64: len = sizeof(DevDescr);             // descriptor length
      0000A0 7F 12            [12]  737 	mov	r7,#0x12
                                    738 ;	src/usb_handler.c:65: break;
                                    739 ;	src/usb_handler.c:67: case USB_DESCR_TYP_CONFIG:            // Configuration Descriptor
      0000A2 80 76            [24]  740 	sjmp	00117$
      0000A4                        741 00103$:
                                    742 ;	src/usb_handler.c:68: pDescr = (uint8_t*)&CfgDescr;       // put descriptor into out buffer
      0000A4 75*04r00         [24]  743 	mov	_pDescr,#_CfgDescr
      0000A7 75*05s00         [24]  744 	mov	(_pDescr + 1),#(_CfgDescr >> 8)
                                    745 ;	src/usb_handler.c:69: len = sizeof(CfgDescr);             // descriptor length
      0000AA 7F 29            [12]  746 	mov	r7,#0x29
                                    747 ;	src/usb_handler.c:70: break;
                                    748 ;	src/usb_handler.c:72: case USB_DESCR_TYP_STRING:
      0000AC 80 6C            [24]  749 	sjmp	00117$
      0000AE                        750 00104$:
                                    751 ;	src/usb_handler.c:73: switch(USB_setupBuf->wValueL) {      // String Descriptor Index
      0000AE 90 00 02         [24]  752 	mov	dptr,#(_EP0_buffer + 0x0002)
      0000B1 E0               [24]  753 	movx	a,@dptr
      0000B2 FE               [12]  754 	mov  r6,a
      0000B3 24 FB            [12]  755 	add	a,#0xff - 0x04
      0000B5 40 38            [24]  756 	jc	00110$
      0000B7 EE               [12]  757 	mov	a,r6
      0000B8 2E               [12]  758 	add	a,r6
                                    759 ;	src/usb_handler.c:74: case 0:   pDescr = USB_STR_DESCR_i0; break;
      0000B9 90r00rBD         [24]  760 	mov	dptr,#00343$
      0000BC 73               [24]  761 	jmp	@a+dptr
      0000BD                        762 00343$:
      0000BD 80 08            [24]  763 	sjmp	00105$
      0000BF 80 0E            [24]  764 	sjmp	00106$
      0000C1 80 14            [24]  765 	sjmp	00107$
      0000C3 80 1A            [24]  766 	sjmp	00108$
      0000C5 80 20            [24]  767 	sjmp	00109$
      0000C7                        768 00105$:
      0000C7 75*04r00         [24]  769 	mov	_pDescr,#_LangDescr
      0000CA 75*05s00         [24]  770 	mov	(_pDescr + 1),#(_LangDescr >> 8)
                                    771 ;	src/usb_handler.c:75: case 1:   pDescr = USB_STR_DESCR_i1; break;
      0000CD 80 26            [24]  772 	sjmp	00111$
      0000CF                        773 00106$:
      0000CF 75*04r00         [24]  774 	mov	_pDescr,#_ManufDescr
      0000D2 75*05s00         [24]  775 	mov	(_pDescr + 1),#(_ManufDescr >> 8)
                                    776 ;	src/usb_handler.c:76: case 2:   pDescr = USB_STR_DESCR_i2; break;
      0000D5 80 1E            [24]  777 	sjmp	00111$
      0000D7                        778 00107$:
      0000D7 75*04r00         [24]  779 	mov	_pDescr,#_ProdDescr
      0000DA 75*05s00         [24]  780 	mov	(_pDescr + 1),#(_ProdDescr >> 8)
                                    781 ;	src/usb_handler.c:77: case 3:   pDescr = USB_STR_DESCR_i3; break;
      0000DD 80 16            [24]  782 	sjmp	00111$
      0000DF                        783 00108$:
      0000DF 75*04r00         [24]  784 	mov	_pDescr,#_SerDescr
      0000E2 75*05s00         [24]  785 	mov	(_pDescr + 1),#(_SerDescr >> 8)
                                    786 ;	src/usb_handler.c:79: case 4:   pDescr = USB_STR_DESCR_i4; break;
      0000E5 80 0E            [24]  787 	sjmp	00111$
      0000E7                        788 00109$:
      0000E7 75*04r00         [24]  789 	mov	_pDescr,#_InterfDescr
      0000EA 75*05s00         [24]  790 	mov	(_pDescr + 1),#(_InterfDescr >> 8)
                                    791 ;	src/usb_handler.c:96: default:  pDescr = USB_STR_DESCR_ix; break;
      0000ED 80 06            [24]  792 	sjmp	00111$
      0000EF                        793 00110$:
      0000EF 75*04r00         [24]  794 	mov	_pDescr,#_SerDescr
      0000F2 75*05s00         [24]  795 	mov	(_pDescr + 1),#(_SerDescr >> 8)
                                    796 ;	src/usb_handler.c:97: }
      0000F5                        797 00111$:
                                    798 ;	src/usb_handler.c:98: len = pDescr[0];                    // descriptor length
      0000F5 85*04 82         [24]  799 	mov	dpl,_pDescr
      0000F8 85*05 83         [24]  800 	mov	dph,(_pDescr + 1)
      0000FB E4               [12]  801 	clr	a
      0000FC 93               [24]  802 	movc	a,@a+dptr
      0000FD FF               [12]  803 	mov	r7,a
                                    804 ;	src/usb_handler.c:99: break;
                                    805 ;	src/usb_handler.c:102: case USB_DESCR_TYP_REPORT:
      0000FE 80 1A            [24]  806 	sjmp	00117$
      000100                        807 00112$:
                                    808 ;	src/usb_handler.c:103: if(USB_setupBuf->wValueL == 0) {
      000100 90 00 02         [24]  809 	mov	dptr,#(_EP0_buffer + 0x0002)
      000103 E0               [24]  810 	movx	a,@dptr
      000104 70 0E            [24]  811 	jnz	00114$
                                    812 ;	src/usb_handler.c:104: pDescr = USB_REPORT_DESCR;
      000106 75*04r00         [24]  813 	mov	_pDescr,#_ReportDescr
      000109 75*05s00         [24]  814 	mov	(_pDescr + 1),#(_ReportDescr >> 8)
                                    815 ;	src/usb_handler.c:105: len = USB_REPORT_DESCR_LEN;
      00010C 90r00r00         [24]  816 	mov	dptr,#_ReportDescrLen
      00010F E4               [12]  817 	clr	a
      000110 93               [24]  818 	movc	a,@a+dptr
      000111 FF               [12]  819 	mov	r7,a
      000112 80 06            [24]  820 	sjmp	00117$
      000114                        821 00114$:
                                    822 ;	src/usb_handler.c:107: else len = 0xff;
      000114 7F FF            [12]  823 	mov	r7,#0xff
                                    824 ;	src/usb_handler.c:108: break;
                                    825 ;	src/usb_handler.c:111: default:
      000116 80 02            [24]  826 	sjmp	00117$
      000118                        827 00116$:
                                    828 ;	src/usb_handler.c:112: len = 0xff;                         // unsupported descriptors or error
      000118 7F FF            [12]  829 	mov	r7,#0xff
                                    830 ;	src/usb_handler.c:114: }
      00011A                        831 00117$:
                                    832 ;	src/usb_handler.c:116: if(len != 0xff) {
      00011A BF FF 03         [24]  833 	cjne	r7,#0xff,00345$
      00011D 02r02rD8         [24]  834 	ljmp	00176$
      000120                        835 00345$:
                                    836 ;	src/usb_handler.c:117: if(SetupLen > len) SetupLen = len;    // limit length
      000120 8F 05            [24]  837 	mov	ar5,r7
      000122 7E 00            [12]  838 	mov	r6,#0x00
      000124 C3               [12]  839 	clr	c
      000125 ED               [12]  840 	mov	a,r5
      000126 95*00            [12]  841 	subb	a,_SetupLen
      000128 EE               [12]  842 	mov	a,r6
      000129 95*01            [12]  843 	subb	a,(_SetupLen + 1)
      00012B 50 04            [24]  844 	jnc	00119$
      00012D 8D*00            [24]  845 	mov	_SetupLen,r5
      00012F 8E*01            [24]  846 	mov	(_SetupLen + 1),r6
      000131                        847 00119$:
                                    848 ;	src/usb_handler.c:118: len = SetupLen >= EP0_SIZE ? EP0_SIZE : SetupLen;
      000131 AD*00            [24]  849 	mov	r5,_SetupLen
      000133 AE*01            [24]  850 	mov	r6,(_SetupLen + 1)
      000135 C3               [12]  851 	clr	c
      000136 ED               [12]  852 	mov	a,r5
      000137 94 40            [12]  853 	subb	a,#0x40
      000139 EE               [12]  854 	mov	a,r6
      00013A 94 00            [12]  855 	subb	a,#0x00
      00013C 92*00            [24]  856 	mov	_USB_EP0_SETUP_sloc0_1_0,c
      00013E 40 06            [24]  857 	jc	00185$
      000140 7D 40            [12]  858 	mov	r5,#0x40
      000142 7E 00            [12]  859 	mov	r6,#0x00
      000144 80 04            [24]  860 	sjmp	00186$
      000146                        861 00185$:
      000146 AD*00            [24]  862 	mov	r5,_SetupLen
      000148 AE*01            [24]  863 	mov	r6,(_SetupLen + 1)
      00014A                        864 00186$:
      00014A 8D 07            [24]  865 	mov	ar7,r5
                                    866 ;	src/usb_handler.c:119: USB_EP0_copyDescr(len);               // copy descriptor to Ep0
      00014C 8F 82            [24]  867 	mov	dpl,r7
      00014E 12r00r00         [24]  868 	lcall	_USB_EP0_copyDescr
                                    869 ;	src/usb_handler.c:120: SetupLen -= len;
      000151 8F 05            [24]  870 	mov	ar5,r7
      000153 7E 00            [12]  871 	mov	r6,#0x00
      000155 AB*00            [24]  872 	mov	r3,_SetupLen
      000157 AC*01            [24]  873 	mov	r4,(_SetupLen + 1)
      000159 EB               [12]  874 	mov	a,r3
      00015A C3               [12]  875 	clr	c
      00015B 9D               [12]  876 	subb	a,r5
      00015C FB               [12]  877 	mov	r3,a
      00015D EC               [12]  878 	mov	a,r4
      00015E 9E               [12]  879 	subb	a,r6
      00015F FC               [12]  880 	mov	r4,a
      000160 8B*00            [24]  881 	mov	_SetupLen,r3
      000162 8C*01            [24]  882 	mov	(_SetupLen + 1),r4
                                    883 ;	src/usb_handler.c:121: pDescr += len;
      000164 EF               [12]  884 	mov	a,r7
      000165 25*04            [12]  885 	add	a,_pDescr
      000167 F5*04            [12]  886 	mov	_pDescr,a
      000169 E4               [12]  887 	clr	a
      00016A 35*05            [12]  888 	addc	a,(_pDescr + 1)
      00016C F5*05            [12]  889 	mov	(_pDescr + 1),a
                                    890 ;	src/usb_handler.c:123: break;
      00016E 02r02rD8         [24]  891 	ljmp	00176$
                                    892 ;	src/usb_handler.c:125: case USB_SET_ADDRESS:
      000171                        893 00122$:
                                    894 ;	src/usb_handler.c:126: SetupLen = USB_setupBuf->wValueL;        // save the assigned address
      000171 90 00 02         [24]  895 	mov	dptr,#(_EP0_buffer + 0x0002)
      000174 E0               [24]  896 	movx	a,@dptr
      000175 FE               [12]  897 	mov	r6,a
      000176 8E*00            [24]  898 	mov	_SetupLen,r6
      000178 75*01 00         [24]  899 	mov	(_SetupLen + 1),#0x00
                                    900 ;	src/usb_handler.c:127: break;
      00017B 02r02rD8         [24]  901 	ljmp	00176$
                                    902 ;	src/usb_handler.c:129: case USB_GET_CONFIGURATION:
      00017E                        903 00123$:
                                    904 ;	src/usb_handler.c:130: EP0_buffer[0] = UsbConfig;
      00017E 90 00 00         [24]  905 	mov	dptr,#_EP0_buffer
      000181 E5*03            [12]  906 	mov	a,_UsbConfig
      000183 F0               [24]  907 	movx	@dptr,a
                                    908 ;	src/usb_handler.c:131: if (SetupLen >= 1) len = 1;
      000184 AD*00            [24]  909 	mov	r5,_SetupLen
      000186 AE*01            [24]  910 	mov	r6,(_SetupLen + 1)
      000188 C3               [12]  911 	clr	c
      000189 ED               [12]  912 	mov	a,r5
      00018A 94 01            [12]  913 	subb	a,#0x01
      00018C EE               [12]  914 	mov	a,r6
      00018D 94 00            [12]  915 	subb	a,#0x00
      00018F 50 03            [24]  916 	jnc	00348$
      000191 02r02rD8         [24]  917 	ljmp	00176$
      000194                        918 00348$:
      000194 7F 01            [12]  919 	mov	r7,#0x01
                                    920 ;	src/usb_handler.c:132: break;
      000196 02r02rD8         [24]  921 	ljmp	00176$
                                    922 ;	src/usb_handler.c:134: case USB_SET_CONFIGURATION:
      000199                        923 00126$:
                                    924 ;	src/usb_handler.c:135: UsbConfig = USB_setupBuf->wValueL;
      000199 90 00 02         [24]  925 	mov	dptr,#(_EP0_buffer + 0x0002)
      00019C E0               [24]  926 	movx	a,@dptr
      00019D F5*03            [12]  927 	mov	_UsbConfig,a
                                    928 ;	src/usb_handler.c:136: break;
      00019F 02r02rD8         [24]  929 	ljmp	00176$
                                    930 ;	src/usb_handler.c:144: case USB_CLEAR_FEATURE:
      0001A2                        931 00129$:
                                    932 ;	src/usb_handler.c:145: if( (USB_setupBuf->bRequestType & 0x1F) == USB_REQ_RECIP_DEVICE ) {
      0001A2 90 00 00         [24]  933 	mov	dptr,#_EP0_buffer
      0001A5 E0               [24]  934 	movx	a,@dptr
      0001A6 54 1F            [12]  935 	anl	a,#0x1f
      0001A8 70 2F            [24]  936 	jnz	00144$
                                    937 ;	src/usb_handler.c:146: if( ( ( (uint16_t)USB_setupBuf->wValueH << 8 ) | USB_setupBuf->wValueL ) == 0x01 ) {
      0001AA 90 00 03         [24]  938 	mov	dptr,#(_EP0_buffer + 0x0003)
      0001AD E0               [24]  939 	movx	a,@dptr
      0001AE FD               [12]  940 	mov	r5,a
      0001AF 7E 00            [12]  941 	mov	r6,#0x00
      0001B1 90 00 02         [24]  942 	mov	dptr,#(_EP0_buffer + 0x0002)
      0001B4 E0               [24]  943 	movx	a,@dptr
      0001B5 FC               [12]  944 	mov	r4,a
      0001B6 7B 00            [12]  945 	mov	r3,#0x00
      0001B8 42 06            [12]  946 	orl	ar6,a
      0001BA EB               [12]  947 	mov	a,r3
      0001BB 42 05            [12]  948 	orl	ar5,a
      0001BD BE 01 14         [24]  949 	cjne	r6,#0x01,00134$
      0001C0 BD 00 11         [24]  950 	cjne	r5,#0x00,00134$
                                    951 ;	src/usb_handler.c:147: if( ((uint8_t*)&CfgDescr)[7] & 0x20) {
      0001C3 90r00r07         [24]  952 	mov	dptr,#(_CfgDescr + 0x0007)
      0001C6 E4               [12]  953 	clr	a
      0001C7 93               [24]  954 	movc	a,@a+dptr
      0001C8 FE               [12]  955 	mov	r6,a
      0001C9 30 E5 03         [24]  956 	jnb	acc.5,00353$
      0001CC 02r02rD8         [24]  957 	ljmp	00176$
      0001CF                        958 00353$:
                                    959 ;	src/usb_handler.c:150: else len = 0xFF;               // failed
      0001CF 7F FF            [12]  960 	mov	r7,#0xff
      0001D1 02r02rD8         [24]  961 	ljmp	00176$
      0001D4                        962 00134$:
                                    963 ;	src/usb_handler.c:152: else len = 0xFF;                 // failed
      0001D4 7F FF            [12]  964 	mov	r7,#0xff
      0001D6 02r02rD8         [24]  965 	ljmp	00176$
      0001D9                        966 00144$:
                                    967 ;	src/usb_handler.c:154: else if( (USB_setupBuf->bRequestType & USB_REQ_RECIP_MASK) == USB_REQ_RECIP_ENDP ) {
      0001D9 90 00 00         [24]  968 	mov	dptr,#_EP0_buffer
      0001DC E0               [24]  969 	movx	a,@dptr
      0001DD FE               [12]  970 	mov	r6,a
      0001DE 53 06 1F         [24]  971 	anl	ar6,#0x1f
      0001E1 7D 00            [12]  972 	mov	r5,#0x00
      0001E3 BE 02 28         [24]  973 	cjne	r6,#0x02,00141$
      0001E6 BD 00 25         [24]  974 	cjne	r5,#0x00,00141$
                                    975 ;	src/usb_handler.c:155: switch(USB_setupBuf->wIndexL) {
      0001E9 90 00 04         [24]  976 	mov	dptr,#(_EP0_buffer + 0x0004)
      0001EC E0               [24]  977 	movx	a,@dptr
      0001ED FE               [12]  978 	mov	r6,a
      0001EE BE 02 02         [24]  979 	cjne	r6,#0x02,00356$
      0001F1 80 05            [24]  980 	sjmp	00136$
      0001F3                        981 00356$:
                                    982 ;	src/usb_handler.c:182: case 0x02:
      0001F3 BE 81 13         [24]  983 	cjne	r6,#0x81,00138$
      0001F6 80 06            [24]  984 	sjmp	00137$
      0001F8                        985 00136$:
                                    986 ;	src/usb_handler.c:183: UEP2_CTRL = UEP2_CTRL & ~ ( bUEP_R_TOG | MASK_UEP_R_RES ) | UEP_R_RES_ACK;
      0001F8 53 D4 73         [24]  987 	anl	_UEP2_CTRL,#0x73
                                    988 ;	src/usb_handler.c:184: break;
      0001FB 02r02rD8         [24]  989 	ljmp	00176$
                                    990 ;	src/usb_handler.c:187: case 0x81:
      0001FE                        991 00137$:
                                    992 ;	src/usb_handler.c:188: UEP1_CTRL = UEP1_CTRL & ~ ( bUEP_T_TOG | MASK_UEP_T_RES ) | UEP_T_RES_NAK;
      0001FE 74 BC            [12]  993 	mov	a,#0xbc
      000200 55 D2            [12]  994 	anl	a,_UEP1_CTRL
      000202 44 02            [12]  995 	orl	a,#0x02
      000204 F5 D2            [12]  996 	mov	_UEP1_CTRL,a
                                    997 ;	src/usb_handler.c:189: break;
      000206 02r02rD8         [24]  998 	ljmp	00176$
                                    999 ;	src/usb_handler.c:196: default:
      000209                       1000 00138$:
                                   1001 ;	src/usb_handler.c:197: len = 0xFF;                 // unsupported endpoint
      000209 7F FF            [12] 1002 	mov	r7,#0xff
                                   1003 ;	src/usb_handler.c:199: }
      00020B 02r02rD8         [24] 1004 	ljmp	00176$
      00020E                       1005 00141$:
                                   1006 ;	src/usb_handler.c:201: else len = 0xFF;                  // unsupported for non-endpoint
      00020E 7F FF            [12] 1007 	mov	r7,#0xff
                                   1008 ;	src/usb_handler.c:202: break;
      000210 02r02rD8         [24] 1009 	ljmp	00176$
                                   1010 ;	src/usb_handler.c:204: case USB_SET_FEATURE:
      000213                       1011 00146$:
                                   1012 ;	src/usb_handler.c:205: if( (USB_setupBuf->bRequestType & 0x1F) == USB_REQ_RECIP_DEVICE ) {
      000213 90 00 00         [24] 1013 	mov	dptr,#_EP0_buffer
      000216 E0               [24] 1014 	movx	a,@dptr
      000217 54 1F            [12] 1015 	anl	a,#0x1f
      000219 70 2F            [24] 1016 	jnz	00163$
                                   1017 ;	src/usb_handler.c:206: if( ( ( (uint16_t)USB_setupBuf->wValueH << 8 ) | USB_setupBuf->wValueL ) == 0x01 ) {
      00021B 90 00 03         [24] 1018 	mov	dptr,#(_EP0_buffer + 0x0003)
      00021E E0               [24] 1019 	movx	a,@dptr
      00021F FD               [12] 1020 	mov	r5,a
      000220 7E 00            [12] 1021 	mov	r6,#0x00
      000222 90 00 02         [24] 1022 	mov	dptr,#(_EP0_buffer + 0x0002)
      000225 E0               [24] 1023 	movx	a,@dptr
      000226 FC               [12] 1024 	mov	r4,a
      000227 7B 00            [12] 1025 	mov	r3,#0x00
      000229 42 06            [12] 1026 	orl	ar6,a
      00022B EB               [12] 1027 	mov	a,r3
      00022C 42 05            [12] 1028 	orl	ar5,a
      00022E BE 01 14         [24] 1029 	cjne	r6,#0x01,00150$
      000231 BD 00 11         [24] 1030 	cjne	r5,#0x00,00150$
                                   1031 ;	src/usb_handler.c:207: if( !(((uint8_t*)&CfgDescr)[7] & 0x20) ) len = 0xFF;  // failed
      000234 90r00r07         [24] 1032 	mov	dptr,#(_CfgDescr + 0x0007)
      000237 E4               [12] 1033 	clr	a
      000238 93               [24] 1034 	movc	a,@a+dptr
      000239 FE               [12] 1035 	mov	r6,a
      00023A 30 E5 03         [24] 1036 	jnb	acc.5,00362$
      00023D 02r02rD8         [24] 1037 	ljmp	00176$
      000240                       1038 00362$:
      000240 7F FF            [12] 1039 	mov	r7,#0xff
      000242 02r02rD8         [24] 1040 	ljmp	00176$
      000245                       1041 00150$:
                                   1042 ;	src/usb_handler.c:209: else len = 0xFF;                                        // failed
      000245 7F FF            [12] 1043 	mov	r7,#0xff
      000247 02r02rD8         [24] 1044 	ljmp	00176$
      00024A                       1045 00163$:
                                   1046 ;	src/usb_handler.c:211: else if( (USB_setupBuf->bRequestType & 0x1F) == USB_REQ_RECIP_ENDP ) {
      00024A 90 00 00         [24] 1047 	mov	dptr,#_EP0_buffer
      00024D E0               [24] 1048 	movx	a,@dptr
      00024E FE               [12] 1049 	mov	r6,a
      00024F 53 06 1F         [24] 1050 	anl	ar6,#0x1f
      000252 7D 00            [12] 1051 	mov	r5,#0x00
      000254 BE 02 59         [24] 1052 	cjne	r6,#0x02,00160$
      000257 BD 00 56         [24] 1053 	cjne	r5,#0x00,00160$
                                   1054 ;	src/usb_handler.c:212: if( ( ( (uint16_t)USB_setupBuf->wValueH << 8 ) | USB_setupBuf->wValueL ) == 0x00 ) {
      00025A 90 00 03         [24] 1055 	mov	dptr,#(_EP0_buffer + 0x0003)
      00025D E0               [24] 1056 	movx	a,@dptr
      00025E FD               [12] 1057 	mov	r5,a
      00025F 7E 00            [12] 1058 	mov	r6,#0x00
      000261 90 00 02         [24] 1059 	mov	dptr,#(_EP0_buffer + 0x0002)
      000264 E0               [24] 1060 	movx	a,@dptr
      000265 FC               [12] 1061 	mov	r4,a
      000266 7B 00            [12] 1062 	mov	r3,#0x00
      000268 42 06            [12] 1063 	orl	ar6,a
      00026A EB               [12] 1064 	mov	a,r3
      00026B 42 05            [12] 1065 	orl	ar5,a
      00026D EE               [12] 1066 	mov	a,r6
      00026E 4D               [12] 1067 	orl	a,r5
      00026F 70 3B            [24] 1068 	jnz	00157$
                                   1069 ;	src/usb_handler.c:213: switch( ( (uint16_t)USB_setupBuf->wIndexH << 8 ) | USB_setupBuf->wIndexL ) {
      000271 90 00 05         [24] 1070 	mov	dptr,#(_EP0_buffer + 0x0005)
      000274 E0               [24] 1071 	movx	a,@dptr
      000275 FD               [12] 1072 	mov	r5,a
      000276 7E 00            [12] 1073 	mov	r6,#0x00
      000278 90 00 04         [24] 1074 	mov	dptr,#(_EP0_buffer + 0x0004)
      00027B E0               [24] 1075 	movx	a,@dptr
      00027C FC               [12] 1076 	mov	r4,a
      00027D 7B 00            [12] 1077 	mov	r3,#0x00
      00027F 42 06            [12] 1078 	orl	ar6,a
      000281 EB               [12] 1079 	mov	a,r3
      000282 42 05            [12] 1080 	orl	ar5,a
      000284 BE 02 05         [24] 1081 	cjne	r6,#0x02,00366$
      000287 BD 00 02         [24] 1082 	cjne	r5,#0x00,00366$
      00028A 80 08            [24] 1083 	sjmp	00152$
      00028C                       1084 00366$:
                                   1085 ;	src/usb_handler.c:240: case 0x02:
      00028C BE 81 19         [24] 1086 	cjne	r6,#0x81,00154$
      00028F BD 00 16         [24] 1087 	cjne	r5,#0x00,00154$
      000292 80 0A            [24] 1088 	sjmp	00153$
      000294                       1089 00152$:
                                   1090 ;	src/usb_handler.c:241: UEP2_CTRL = UEP2_CTRL & (~bUEP_R_TOG) | UEP_R_RES_STALL;// Set EP2 OUT Stall 
      000294 74 7F            [12] 1091 	mov	a,#0x7f
      000296 55 D4            [12] 1092 	anl	a,_UEP2_CTRL
      000298 44 0C            [12] 1093 	orl	a,#0x0c
      00029A F5 D4            [12] 1094 	mov	_UEP2_CTRL,a
                                   1095 ;	src/usb_handler.c:242: break;
                                   1096 ;	src/usb_handler.c:245: case 0x81:
      00029C 80 3A            [24] 1097 	sjmp	00176$
      00029E                       1098 00153$:
                                   1099 ;	src/usb_handler.c:246: UEP1_CTRL = UEP1_CTRL & (~bUEP_T_TOG) | UEP_T_RES_STALL;// Set EP1 IN STALL 
      00029E 74 BF            [12] 1100 	mov	a,#0xbf
      0002A0 55 D2            [12] 1101 	anl	a,_UEP1_CTRL
      0002A2 44 03            [12] 1102 	orl	a,#0x03
      0002A4 F5 D2            [12] 1103 	mov	_UEP1_CTRL,a
                                   1104 ;	src/usb_handler.c:247: break;
                                   1105 ;	src/usb_handler.c:254: default:
      0002A6 80 30            [24] 1106 	sjmp	00176$
      0002A8                       1107 00154$:
                                   1108 ;	src/usb_handler.c:255: len = 0xFF;               // failed
      0002A8 7F FF            [12] 1109 	mov	r7,#0xff
                                   1110 ;	src/usb_handler.c:257: }
      0002AA 80 2C            [24] 1111 	sjmp	00176$
      0002AC                       1112 00157$:
                                   1113 ;	src/usb_handler.c:259: else len = 0xFF;                // failed
      0002AC 7F FF            [12] 1114 	mov	r7,#0xff
      0002AE 80 28            [24] 1115 	sjmp	00176$
      0002B0                       1116 00160$:
                                   1117 ;	src/usb_handler.c:261: else len = 0xFF;                  // failed
      0002B0 7F FF            [12] 1118 	mov	r7,#0xff
                                   1119 ;	src/usb_handler.c:262: break;
                                   1120 ;	src/usb_handler.c:264: case USB_GET_STATUS:
      0002B2 80 24            [24] 1121 	sjmp	00176$
      0002B4                       1122 00165$:
                                   1123 ;	src/usb_handler.c:265: EP0_buffer[0] = 0x00;
      0002B4 90 00 00         [24] 1124 	mov	dptr,#_EP0_buffer
      0002B7 E4               [12] 1125 	clr	a
      0002B8 F0               [24] 1126 	movx	@dptr,a
                                   1127 ;	src/usb_handler.c:266: EP0_buffer[1] = 0x00;
      0002B9 90 00 01         [24] 1128 	mov	dptr,#(_EP0_buffer + 0x0001)
      0002BC F0               [24] 1129 	movx	@dptr,a
                                   1130 ;	src/usb_handler.c:267: if(SetupLen >= 2) len = 2;
      0002BD AD*00            [24] 1131 	mov	r5,_SetupLen
      0002BF AE*01            [24] 1132 	mov	r6,(_SetupLen + 1)
      0002C1 C3               [12] 1133 	clr	c
      0002C2 ED               [12] 1134 	mov	a,r5
      0002C3 94 02            [12] 1135 	subb	a,#0x02
      0002C5 EE               [12] 1136 	mov	a,r6
      0002C6 94 00            [12] 1137 	subb	a,#0x00
      0002C8 40 04            [24] 1138 	jc	00167$
      0002CA 7F 02            [12] 1139 	mov	r7,#0x02
      0002CC 80 0A            [24] 1140 	sjmp	00176$
      0002CE                       1141 00167$:
                                   1142 ;	src/usb_handler.c:268: else len = SetupLen;
      0002CE AF*00            [24] 1143 	mov	r7,_SetupLen
                                   1144 ;	src/usb_handler.c:269: break;
                                   1145 ;	src/usb_handler.c:271: default:
      0002D0 80 06            [24] 1146 	sjmp	00176$
      0002D2                       1147 00169$:
                                   1148 ;	src/usb_handler.c:272: len = 0xff;                       // failed
      0002D2 7F FF            [12] 1149 	mov	r7,#0xff
                                   1150 ;	src/usb_handler.c:274: }
      0002D4 80 02            [24] 1151 	sjmp	00176$
      0002D6                       1152 00175$:
                                   1153 ;	src/usb_handler.c:277: else len = 0xff;                          // wrong packet length
      0002D6 7F FF            [12] 1154 	mov	r7,#0xff
      0002D8                       1155 00176$:
                                   1156 ;	src/usb_handler.c:279: if(len == 0xff) {
      0002D8 BF FF 07         [24] 1157 	cjne	r7,#0xff,00181$
                                   1158 ;	src/usb_handler.c:280: SetupReq = 0xFF;
      0002DB 75*02 FF         [24] 1159 	mov	_SetupReq,#0xff
                                   1160 ;	src/usb_handler.c:281: UEP0_CTRL = bUEP_R_TOG | bUEP_T_TOG | UEP_R_RES_STALL | UEP_T_RES_STALL;//STALL
      0002DE 75 DC CF         [24] 1161 	mov	_UEP0_CTRL,#0xcf
      0002E1 22               [24] 1162 	ret
      0002E2                       1163 00181$:
                                   1164 ;	src/usb_handler.c:283: else if(len <= EP0_SIZE) {      // Tx data to host or send 0-length packet
      0002E2 EF               [12] 1165 	mov	a,r7
      0002E3 24 BF            [12] 1166 	add	a,#0xff - 0x40
      0002E5 40 06            [24] 1167 	jc	00178$
                                   1168 ;	src/usb_handler.c:284: UEP0_T_LEN = len;
      0002E7 8F DD            [24] 1169 	mov	_UEP0_T_LEN,r7
                                   1170 ;	src/usb_handler.c:285: UEP0_CTRL = bUEP_R_TOG | bUEP_T_TOG | UEP_R_RES_ACK | UEP_T_RES_ACK;// Expect DATA1, Answer ACK
      0002E9 75 DC C0         [24] 1171 	mov	_UEP0_CTRL,#0xc0
      0002EC 22               [24] 1172 	ret
      0002ED                       1173 00178$:
                                   1174 ;	src/usb_handler.c:288: UEP0_T_LEN = 0;  // Tx data to host or send 0-length packet
      0002ED 75 DD 00         [24] 1175 	mov	_UEP0_T_LEN,#0x00
                                   1176 ;	src/usb_handler.c:289: UEP0_CTRL = bUEP_R_TOG | bUEP_T_TOG | UEP_R_RES_ACK | UEP_T_RES_ACK;// Expect DATA1, Answer ACK
      0002F0 75 DC C0         [24] 1177 	mov	_UEP0_CTRL,#0xc0
                                   1178 ;	src/usb_handler.c:291: }
      0002F3 22               [24] 1179 	ret
                                   1180 ;------------------------------------------------------------
                                   1181 ;Allocation info for local variables in function 'USB_EP0_IN'
                                   1182 ;------------------------------------------------------------
                                   1183 ;len                       Allocated to registers r6 
                                   1184 ;------------------------------------------------------------
                                   1185 ;	src/usb_handler.c:293: void USB_EP0_IN(void) {
                                   1186 ;	-----------------------------------------
                                   1187 ;	 function USB_EP0_IN
                                   1188 ;	-----------------------------------------
      0002F4                       1189 _USB_EP0_IN:
                                   1190 ;	src/usb_handler.c:295: switch(SetupReq) {
      0002F4 74 05            [12] 1191 	mov	a,#0x05
      0002F6 B5*02 02         [24] 1192 	cjne	a,_SetupReq,00121$
      0002F9 80 46            [24] 1193 	sjmp	00102$
      0002FB                       1194 00121$:
      0002FB 74 06            [12] 1195 	mov	a,#0x06
      0002FD B5*02 4F         [24] 1196 	cjne	a,_SetupReq,00103$
                                   1197 ;	src/usb_handler.c:298: len = SetupLen >= EP0_SIZE ? EP0_SIZE : SetupLen;
      000300 AE*00            [24] 1198 	mov	r6,_SetupLen
      000302 AF*01            [24] 1199 	mov	r7,(_SetupLen + 1)
      000304 C3               [12] 1200 	clr	c
      000305 EE               [12] 1201 	mov	a,r6
      000306 94 40            [12] 1202 	subb	a,#0x40
      000308 EF               [12] 1203 	mov	a,r7
      000309 94 00            [12] 1204 	subb	a,#0x00
      00030B 92*01            [24] 1205 	mov	_USB_EP0_IN_sloc0_1_0,c
      00030D 40 06            [24] 1206 	jc	00107$
      00030F 7E 40            [12] 1207 	mov	r6,#0x40
      000311 7F 00            [12] 1208 	mov	r7,#0x00
      000313 80 04            [24] 1209 	sjmp	00108$
      000315                       1210 00107$:
      000315 AE*00            [24] 1211 	mov	r6,_SetupLen
      000317 AF*01            [24] 1212 	mov	r7,(_SetupLen + 1)
      000319                       1213 00108$:
                                   1214 ;	src/usb_handler.c:299: USB_EP0_copyDescr(len);                     // copy descriptor to Ep0                                
      000319 8E 82            [24] 1215 	mov	dpl,r6
      00031B 12r00r00         [24] 1216 	lcall	_USB_EP0_copyDescr
                                   1217 ;	src/usb_handler.c:300: SetupLen  -= len;
      00031E 8E 05            [24] 1218 	mov	ar5,r6
      000320 7F 00            [12] 1219 	mov	r7,#0x00
      000322 AB*00            [24] 1220 	mov	r3,_SetupLen
      000324 AC*01            [24] 1221 	mov	r4,(_SetupLen + 1)
      000326 EB               [12] 1222 	mov	a,r3
      000327 C3               [12] 1223 	clr	c
      000328 9D               [12] 1224 	subb	a,r5
      000329 FB               [12] 1225 	mov	r3,a
      00032A EC               [12] 1226 	mov	a,r4
      00032B 9F               [12] 1227 	subb	a,r7
      00032C FC               [12] 1228 	mov	r4,a
      00032D 8B*00            [24] 1229 	mov	_SetupLen,r3
      00032F 8C*01            [24] 1230 	mov	(_SetupLen + 1),r4
                                   1231 ;	src/usb_handler.c:301: pDescr    += len;
      000331 EE               [12] 1232 	mov	a,r6
      000332 25*04            [12] 1233 	add	a,_pDescr
      000334 F5*04            [12] 1234 	mov	_pDescr,a
      000336 E4               [12] 1235 	clr	a
      000337 35*05            [12] 1236 	addc	a,(_pDescr + 1)
      000339 F5*05            [12] 1237 	mov	(_pDescr + 1),a
                                   1238 ;	src/usb_handler.c:302: UEP0_T_LEN = len;
      00033B 8E DD            [24] 1239 	mov	_UEP0_T_LEN,r6
                                   1240 ;	src/usb_handler.c:303: UEP0_CTRL ^= bUEP_T_TOG;                    // switch between DATA0 and DATA1
      00033D 63 DC 40         [24] 1241 	xrl	_UEP0_CTRL,#0x40
                                   1242 ;	src/usb_handler.c:304: break;
                                   1243 ;	src/usb_handler.c:306: case USB_SET_ADDRESS:
      000340 22               [24] 1244 	ret
      000341                       1245 00102$:
                                   1246 ;	src/usb_handler.c:307: USB_DEV_AD = USB_DEV_AD & bUDA_GP_BIT | SetupLen;
      000341 E5 E3            [12] 1247 	mov	a,_USB_DEV_AD
      000343 54 80            [12] 1248 	anl	a,#0x80
      000345 FF               [12] 1249 	mov	r7,a
      000346 E5*00            [12] 1250 	mov	a,_SetupLen
      000348 4F               [12] 1251 	orl	a,r7
      000349 F5 E3            [12] 1252 	mov	_USB_DEV_AD,a
                                   1253 ;	src/usb_handler.c:308: UEP0_CTRL  = UEP_R_RES_ACK | UEP_T_RES_NAK;
      00034B 75 DC 02         [24] 1254 	mov	_UEP0_CTRL,#0x02
                                   1255 ;	src/usb_handler.c:309: break;
                                   1256 ;	src/usb_handler.c:311: default:
      00034E 22               [24] 1257 	ret
      00034F                       1258 00103$:
                                   1259 ;	src/usb_handler.c:312: UEP0_T_LEN = 0;                             // end of transaction
      00034F 75 DD 00         [24] 1260 	mov	_UEP0_T_LEN,#0x00
                                   1261 ;	src/usb_handler.c:313: UEP0_CTRL  = UEP_R_RES_ACK | UEP_T_RES_NAK;
      000352 75 DC 02         [24] 1262 	mov	_UEP0_CTRL,#0x02
                                   1263 ;	src/usb_handler.c:315: }
                                   1264 ;	src/usb_handler.c:316: }
      000355 22               [24] 1265 	ret
                                   1266 ;------------------------------------------------------------
                                   1267 ;Allocation info for local variables in function 'USB_EP0_OUT'
                                   1268 ;------------------------------------------------------------
                                   1269 ;	src/usb_handler.c:318: void USB_EP0_OUT(void) {
                                   1270 ;	-----------------------------------------
                                   1271 ;	 function USB_EP0_OUT
                                   1272 ;	-----------------------------------------
      000356                       1273 _USB_EP0_OUT:
                                   1274 ;	src/usb_handler.c:319: UEP0_T_LEN = 0;
      000356 75 DD 00         [24] 1275 	mov	_UEP0_T_LEN,#0x00
                                   1276 ;	src/usb_handler.c:320: UEP0_CTRL |= UEP_R_RES_ACK | UEP_T_RES_NAK;     // respond Nak
      000359 43 DC 02         [24] 1277 	orl	_UEP0_CTRL,#0x02
                                   1278 ;	src/usb_handler.c:321: }
      00035C 22               [24] 1279 	ret
                                   1280 ;------------------------------------------------------------
                                   1281 ;Allocation info for local variables in function 'USB_interrupt'
                                   1282 ;------------------------------------------------------------
                                   1283 ;callIndex                 Allocated to registers r7 
                                   1284 ;------------------------------------------------------------
                                   1285 ;	src/usb_handler.c:329: void USB_interrupt(void) {   // inline not really working in multiple files in SDCC
                                   1286 ;	-----------------------------------------
                                   1287 ;	 function USB_interrupt
                                   1288 ;	-----------------------------------------
      00035D                       1289 _USB_interrupt:
                                   1290 ;	src/usb_handler.c:330: if(UIF_TRANSFER) {
      00035D 30 D9 5C         [24] 1291 	jnb	_UIF_TRANSFER,00120$
                                   1292 ;	src/usb_handler.c:332: uint8_t callIndex = USB_INT_ST & MASK_UIS_ENDP;
      000360 E5 D9            [12] 1293 	mov	a,_USB_INT_ST
      000362 54 0F            [12] 1294 	anl	a,#0x0f
      000364 FF               [12] 1295 	mov	r7,a
                                   1296 ;	src/usb_handler.c:333: switch (USB_INT_ST & MASK_UIS_TOKEN) {
      000365 AD D9            [24] 1297 	mov	r5,_USB_INT_ST
      000367 53 05 30         [24] 1298 	anl	ar5,#0x30
      00036A 7E 00            [12] 1299 	mov	r6,#0x00
      00036C BD 00 05         [24] 1300 	cjne	r5,#0x00,00182$
      00036F BE 00 02         [24] 1301 	cjne	r6,#0x00,00182$
      000372 80 18            [24] 1302 	sjmp	00101$
      000374                       1303 00182$:
      000374 BD 10 05         [24] 1304 	cjne	r5,#0x10,00183$
      000377 BE 00 02         [24] 1305 	cjne	r6,#0x00,00183$
      00037A 80 3E            [24] 1306 	sjmp	00118$
      00037C                       1307 00183$:
      00037C BD 20 05         [24] 1308 	cjne	r5,#0x20,00184$
      00037F BE 00 02         [24] 1309 	cjne	r6,#0x00,00184$
      000382 80 1C            [24] 1310 	sjmp	00109$
      000384                       1311 00184$:
                                   1312 ;	src/usb_handler.c:334: case UIS_TOKEN_OUT:
      000384 BD 30 33         [24] 1313 	cjne	r5,#0x30,00118$
      000387 BE 00 30         [24] 1314 	cjne	r6,#0x00,00118$
      00038A 80 28            [24] 1315 	sjmp	00114$
      00038C                       1316 00101$:
                                   1317 ;	src/usb_handler.c:335: switch (callIndex) {
      00038C BF 00 02         [24] 1318 	cjne	r7,#0x00,00186$
      00038F 80 05            [24] 1319 	sjmp	00102$
      000391                       1320 00186$:
                                   1321 ;	src/usb_handler.c:336: case 0: EP0_OUT_callback(); break;
      000391 BF 02 26         [24] 1322 	cjne	r7,#0x02,00118$
      000394 80 05            [24] 1323 	sjmp	00103$
      000396                       1324 00102$:
      000396 12r03r56         [24] 1325 	lcall	_USB_EP0_OUT
                                   1326 ;	src/usb_handler.c:341: case 2: EP2_OUT_callback(); break;
      000399 80 1F            [24] 1327 	sjmp	00118$
      00039B                       1328 00103$:
      00039B 12r00r00         [24] 1329 	lcall	_HID_EP2_OUT
                                   1330 ;	src/usb_handler.c:372: case UIS_TOKEN_IN:
      00039E 80 1A            [24] 1331 	sjmp	00118$
      0003A0                       1332 00109$:
                                   1333 ;	src/usb_handler.c:373: switch (callIndex) {
      0003A0 BF 00 02         [24] 1334 	cjne	r7,#0x00,00188$
      0003A3 80 05            [24] 1335 	sjmp	00110$
      0003A5                       1336 00188$:
                                   1337 ;	src/usb_handler.c:374: case 0: EP0_IN_callback(); break;
      0003A5 BF 01 12         [24] 1338 	cjne	r7,#0x01,00118$
      0003A8 80 05            [24] 1339 	sjmp	00111$
      0003AA                       1340 00110$:
      0003AA 12r02rF4         [24] 1341 	lcall	_USB_EP0_IN
                                   1342 ;	src/usb_handler.c:376: case 1: EP1_IN_callback(); break;
      0003AD 80 0B            [24] 1343 	sjmp	00118$
      0003AF                       1344 00111$:
      0003AF 12r00r00         [24] 1345 	lcall	_HID_EP1_IN
                                   1346 ;	src/usb_handler.c:390: case UIS_TOKEN_SETUP:
      0003B2 80 06            [24] 1347 	sjmp	00118$
      0003B4                       1348 00114$:
                                   1349 ;	src/usb_handler.c:391: switch (callIndex) {
      0003B4 BF 00 03         [24] 1350 	cjne	r7,#0x00,00118$
                                   1351 ;	src/usb_handler.c:392: case 0: EP0_SETUP_callback(); break;
      0003B7 12r00r1A         [24] 1352 	lcall	_USB_EP0_SETUP
                                   1353 ;	src/usb_handler.c:408: }
      0003BA                       1354 00118$:
                                   1355 ;	src/usb_handler.c:409: UIF_TRANSFER = 0;                       // clear interrupt flag
                                   1356 ;	assignBit
      0003BA C2 D9            [12] 1357 	clr	_UIF_TRANSFER
      0003BC                       1358 00120$:
                                   1359 ;	src/usb_handler.c:413: if(UIF_BUS_RST) {
      0003BC 30 D8 0F         [24] 1360 	jnb	_UIF_BUS_RST,00122$
                                   1361 ;	src/usb_handler.c:414: UEP0_CTRL = UEP_R_RES_ACK | UEP_T_RES_NAK;
      0003BF 75 DC 02         [24] 1362 	mov	_UEP0_CTRL,#0x02
                                   1363 ;	src/usb_handler.c:417: USB_RESET_handler();                    // custom reset handler
      0003C2 12r00r00         [24] 1364 	lcall	_HID_reset
                                   1365 ;	src/usb_handler.c:420: USB_DEV_AD   = 0x00;
      0003C5 75 E3 00         [24] 1366 	mov	_USB_DEV_AD,#0x00
                                   1367 ;	src/usb_handler.c:421: UIF_SUSPEND  = 0;
                                   1368 ;	assignBit
      0003C8 C2 DA            [12] 1369 	clr	_UIF_SUSPEND
                                   1370 ;	src/usb_handler.c:422: UIF_TRANSFER = 0;
                                   1371 ;	assignBit
      0003CA C2 D9            [12] 1372 	clr	_UIF_TRANSFER
                                   1373 ;	src/usb_handler.c:423: UIF_BUS_RST  = 0;                       // clear interrupt flag
                                   1374 ;	assignBit
      0003CC C2 D8            [12] 1375 	clr	_UIF_BUS_RST
      0003CE                       1376 00122$:
                                   1377 ;	src/usb_handler.c:427: if (UIF_SUSPEND) {
                                   1378 ;	src/usb_handler.c:428: UIF_SUSPEND = 0;
                                   1379 ;	assignBit
      0003CE 10 DA 01         [24] 1380 	jbc	_UIF_SUSPEND,00193$
      0003D1 22               [24] 1381 	ret
      0003D2                       1382 00193$:
                                   1383 ;	src/usb_handler.c:429: if ( !(USB_MIS_ST & bUMS_SUSPEND) ) USB_INT_FG = 0xFF;  // clear interrupt flag
      0003D2 E5 DA            [12] 1384 	mov	a,_USB_MIS_ST
      0003D4 20 E2 03         [24] 1385 	jb	acc.2,00127$
      0003D7 75 D8 FF         [24] 1386 	mov	_USB_INT_FG,#0xff
      0003DA                       1387 00127$:
                                   1388 ;	src/usb_handler.c:431: }
      0003DA 22               [24] 1389 	ret
                                   1390 ;------------------------------------------------------------
                                   1391 ;Allocation info for local variables in function 'USB_init'
                                   1392 ;------------------------------------------------------------
                                   1393 ;	src/usb_handler.c:438: void USB_init(void) {
                                   1394 ;	-----------------------------------------
                                   1395 ;	 function USB_init
                                   1396 ;	-----------------------------------------
      0003DB                       1397 _USB_init:
                                   1398 ;	src/usb_handler.c:441: | bUC_DMA_EN;                 // DMA enable
      0003DB 75 E2 29         [24] 1399 	mov	_USB_CTRL,#0x29
                                   1400 ;	src/usb_handler.c:443: | bUD_PORT_EN;                // Enable port, full-speed
      0003DE 75 D1 81         [24] 1401 	mov	_UDEV_CTRL,#0x81
                                   1402 ;	src/usb_handler.c:450: UEP0_DMA    = EP0_ADDR;                   // EP0 data transfer address
      0003E1 E4               [12] 1403 	clr	a
      0003E2 F5 EC            [12] 1404 	mov	((_UEP0_DMA >> 0) & 0xFF),a
      0003E4 F5 ED            [12] 1405 	mov	((_UEP0_DMA >> 8) & 0xFF),a
                                   1406 ;	src/usb_handler.c:452: | UEP_T_RES_NAK;              // EP0 IN transaction returns NAK
      0003E6 75 DC 02         [24] 1407 	mov	_UEP0_CTRL,#0x02
                                   1408 ;	src/usb_handler.c:455: USB_INIT_handler();                       // Custom EP init handler
      0003E9 12r00r00         [24] 1409 	lcall	_HID_setup
                                   1410 ;	src/usb_handler.c:460: | bUIE_BUS_RST;               // Enable device mode USB bus reset interrupt
      0003EC 43 E1 07         [24] 1411 	orl	_USB_INT_EN,#0x07
                                   1412 ;	src/usb_handler.c:462: USB_INT_FG |= 0x1F;                       // Clear interrupt flag
      0003EF 43 D8 1F         [24] 1413 	orl	_USB_INT_FG,#0x1f
                                   1414 ;	src/usb_handler.c:463: IE_USB      = 1;                          // Enable USB interrupt
                                   1415 ;	assignBit
      0003F2 D2 EA            [12] 1416 	setb	_IE_USB
                                   1417 ;	src/usb_handler.c:464: EA          = 1;                          // Enable global interrupts
                                   1418 ;	assignBit
      0003F4 D2 AF            [12] 1419 	setb	_EA
                                   1420 ;	src/usb_handler.c:466: UEP0_T_LEN  = 0;                          // Must be zero at start
      0003F6 75 DD 00         [24] 1421 	mov	_UEP0_T_LEN,#0x00
                                   1422 ;	src/usb_handler.c:467: }
      0003F9 22               [24] 1423 	ret
                                   1424 	.area CSEG    (CODE)
                                   1425 	.area CONST   (CODE)
                                   1426 	.area CABS    (ABS,CODE)
